/* eslint-disable @typescript-eslint/no-floating-promises */
/* eslint-disable @typescript-eslint/no-misused-promises */
import { useUser } from "@clerk/nextjs";
import { type NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { api } from "~/utils/api";
import { useForm } from "react-hook-form";
import Image from "next/image";

const ListingView: NextPage = () => {
  const router = useRouter();
  const { register, handleSubmit, reset } = useForm<{ message: string }>();

  const listing = api.listings.get.useQuery(
    {
      listingId: router.query.id as string,
    },
    {
      enabled: !!router.query.id,
    }
  );
  const user = useUser();

  const sendMessage = api.listings.sendMessage.useMutation();

  const listingItem = listing.data;

  if (!listingItem) {
    return null;
  }

  return (
    <>
      <Head>
        <title>View Listing</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="mx-8 flex min-h-screen flex-col gap-12 bg-gray-800 px-8">
        <div className="container mx-auto flex flex-col gap-12">
          <div className="flex flex-col xl:flex-row">
            <Image
              className="rounded-lg"
              src={listingItem.img}
              alt={listingItem.name}
              width={960}
              height={540}
            />
            <div className="m-8 flex flex-col">
              <h1 className="mb-8 mt-12 text-4xl xl:mt-0">
                {listingItem.name}
              </h1>
              <p className="mb-12 text-xl font-extrabold">
                Price: $ {listingItem.price}
              </p>
              <p className=" text-xl">{listingItem.description}</p>
            </div>
          </div>

          {user.isSignedIn && (
            <form
              className="mb-12 flex flex-col gap-4"
              onSubmit={handleSubmit((formData) => {
                sendMessage
                  .mutateAsync({
                    message: formData.message,
                    listingId: listingItem.id,
                  })
                  .then(() => {
                    reset();
                  });
              })}
            >
              <div>
                <label
                  htmlFor="name"
                  className="mb-2 block text-sm font-medium text-gray-900 dark:text-white"
                >
                  Message
                </label>
                <textarea
                  id="name"
                  className="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-500 dark:focus:ring-blue-500"
                  {...register("message", { required: true })}
                />
              </div>
              <button className="inline-flex items-center rounded-lg bg-blue-700 px-3 py-2 text-center text-sm font-medium text-white hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                Send Message
              </button>
            </form>
          )}
        </div>
      </main>
    </>
  );
};

export default ListingView;
